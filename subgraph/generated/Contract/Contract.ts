// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ORI_Fraud_Proven extends ethereum.Event {
  get params(): ORI_Fraud_Proven__Params {
    return new ORI_Fraud_Proven__Params(this);
  }
}

export class ORI_Fraud_Proven__Params {
  _event: ORI_Fraud_Proven;

  constructor(event: ORI_Fraud_Proven) {
    this._event = event;
  }

  get accuser(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get suspect(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get transition_index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ORI_Locked extends ethereum.Event {
  get params(): ORI_Locked__Params {
    return new ORI_Locked__Params(this);
  }
}

export class ORI_Locked__Params {
  _event: ORI_Locked;

  constructor(event: ORI_Locked) {
    this._event = event;
  }

  get suspect(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get accuser(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ORI_New_Optimistic_State extends ethereum.Event {
  get params(): ORI_New_Optimistic_State__Params {
    return new ORI_New_Optimistic_State__Params(this);
  }
}

export class ORI_New_Optimistic_State__Params {
  _event: ORI_New_Optimistic_State;

  constructor(event: ORI_New_Optimistic_State) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get block_time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ORI_New_Optimistic_States extends ethereum.Event {
  get params(): ORI_New_Optimistic_States__Params {
    return new ORI_New_Optimistic_States__Params(this);
  }
}

export class ORI_New_Optimistic_States__Params {
  _event: ORI_New_Optimistic_States;

  constructor(event: ORI_New_Optimistic_States) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get block_time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ORI_New_State extends ethereum.Event {
  get params(): ORI_New_State__Params {
    return new ORI_New_State__Params(this);
  }
}

export class ORI_New_State__Params {
  _event: ORI_New_State;

  constructor(event: ORI_New_State) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get new_state(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class ORI_Rolled_Back extends ethereum.Event {
  get params(): ORI_Rolled_Back__Params {
    return new ORI_Rolled_Back__Params(this);
  }
}

export class ORI_Rolled_Back__Params {
  _event: ORI_Rolled_Back;

  constructor(event: ORI_Rolled_Back) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tree_size(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get block_time(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ORI_Unlocked extends ethereum.Event {
  get params(): ORI_Unlocked__Params {
    return new ORI_Unlocked__Params(this);
  }
}

export class ORI_Unlocked__Params {
  _event: ORI_Unlocked;

  constructor(event: ORI_Unlocked) {
    this._event = event;
  }

  get suspect(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get accuser(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  account_states(param0: Address): Bytes {
    let result = super.call(
      "account_states",
      "account_states(address):(bytes32)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBytes();
  }

  try_account_states(param0: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "account_states",
      "account_states(address):(bytes32)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balances(param0: Address): BigInt {
    let result = super.call("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initializer(): Bytes {
    let result = super.call("initializer", "initializer():(bytes4)", []);

    return result[0].toBytes();
  }

  try_initializer(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("initializer", "initializer():(bytes4)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  lock_time(): BigInt {
    let result = super.call("lock_time", "lock_time():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lock_time(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lock_time", "lock_time():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  locked_times(param0: Address): BigInt {
    let result = super.call("locked_times", "locked_times(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_locked_times(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "locked_times",
      "locked_times(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockers(param0: Address): Address {
    let result = super.call("lockers", "lockers(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_lockers(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("lockers", "lockers(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  logic_address(): Address {
    let result = super.call("logic_address", "logic_address():(address)", []);

    return result[0].toAddress();
  }

  try_logic_address(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "logic_address",
      "logic_address():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  min_bond(): BigInt {
    let result = super.call("min_bond", "min_bond():(uint256)", []);

    return result[0].toBigInt();
  }

  try_min_bond(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("min_bond", "min_bond():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rollback_sizes(param0: Address): BigInt {
    let result = super.call(
      "rollback_sizes",
      "rollback_sizes(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_rollback_sizes(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rollback_sizes",
      "rollback_sizes(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _logic_address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _initializer(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _lock_time(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _min_bond(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BondCall extends ethereum.Call {
  get inputs(): BondCall__Inputs {
    return new BondCall__Inputs(this);
  }

  get outputs(): BondCall__Outputs {
    return new BondCall__Outputs(this);
  }
}

export class BondCall__Inputs {
  _call: BondCall;

  constructor(call: BondCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BondCall__Outputs {
  _call: BondCall;

  constructor(call: BondCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get destination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class PerformCall extends ethereum.Call {
  get inputs(): PerformCall__Inputs {
    return new PerformCall__Inputs(this);
  }

  get outputs(): PerformCall__Outputs {
    return new PerformCall__Outputs(this);
  }
}

export class PerformCall__Inputs {
  _call: PerformCall;

  constructor(call: PerformCall) {
    this._call = call;
  }

  get call_data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformCall__Outputs {
  _call: PerformCall;

  constructor(call: PerformCall) {
    this._call = call;
  }
}

export class Perform_and_exitCall extends ethereum.Call {
  get inputs(): Perform_and_exitCall__Inputs {
    return new Perform_and_exitCall__Inputs(this);
  }

  get outputs(): Perform_and_exitCall__Outputs {
    return new Perform_and_exitCall__Outputs(this);
  }
}

export class Perform_and_exitCall__Inputs {
  _call: Perform_and_exitCall;

  constructor(call: Perform_and_exitCall) {
    this._call = call;
  }

  get call_data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get call_data_root(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get last_time(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class Perform_and_exitCall__Outputs {
  _call: Perform_and_exitCall;

  constructor(call: Perform_and_exitCall) {
    this._call = call;
  }
}

export class Perform_optimistically_and_enterCall extends ethereum.Call {
  get inputs(): Perform_optimistically_and_enterCall__Inputs {
    return new Perform_optimistically_and_enterCall__Inputs(this);
  }

  get outputs(): Perform_optimistically_and_enterCall__Outputs {
    return new Perform_optimistically_and_enterCall__Outputs(this);
  }
}

export class Perform_optimistically_and_enterCall__Inputs {
  _call: Perform_optimistically_and_enterCall;

  constructor(call: Perform_optimistically_and_enterCall) {
    this._call = call;
  }

  get call_data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get new_state(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class Perform_optimistically_and_enterCall__Outputs {
  _call: Perform_optimistically_and_enterCall;

  constructor(call: Perform_optimistically_and_enterCall) {
    this._call = call;
  }
}

export class Perform_optimisticallyCall extends ethereum.Call {
  get inputs(): Perform_optimisticallyCall__Inputs {
    return new Perform_optimisticallyCall__Inputs(this);
  }

  get outputs(): Perform_optimisticallyCall__Outputs {
    return new Perform_optimisticallyCall__Outputs(this);
  }
}

export class Perform_optimisticallyCall__Inputs {
  _call: Perform_optimisticallyCall;

  constructor(call: Perform_optimisticallyCall) {
    this._call = call;
  }

  get call_data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get new_state(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get call_data_root(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }

  get last_time(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class Perform_optimisticallyCall__Outputs {
  _call: Perform_optimisticallyCall;

  constructor(call: Perform_optimisticallyCall) {
    this._call = call;
  }
}

export class Perform_many_optimistically_and_enterCall extends ethereum.Call {
  get inputs(): Perform_many_optimistically_and_enterCall__Inputs {
    return new Perform_many_optimistically_and_enterCall__Inputs(this);
  }

  get outputs(): Perform_many_optimistically_and_enterCall__Outputs {
    return new Perform_many_optimistically_and_enterCall__Outputs(this);
  }
}

export class Perform_many_optimistically_and_enterCall__Inputs {
  _call: Perform_many_optimistically_and_enterCall;

  constructor(call: Perform_many_optimistically_and_enterCall) {
    this._call = call;
  }

  get call_data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get new_state(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class Perform_many_optimistically_and_enterCall__Outputs {
  _call: Perform_many_optimistically_and_enterCall;

  constructor(call: Perform_many_optimistically_and_enterCall) {
    this._call = call;
  }
}

export class Perform_many_optimisticallyCall extends ethereum.Call {
  get inputs(): Perform_many_optimisticallyCall__Inputs {
    return new Perform_many_optimisticallyCall__Inputs(this);
  }

  get outputs(): Perform_many_optimisticallyCall__Outputs {
    return new Perform_many_optimisticallyCall__Outputs(this);
  }
}

export class Perform_many_optimisticallyCall__Inputs {
  _call: Perform_many_optimisticallyCall;

  constructor(call: Perform_many_optimisticallyCall) {
    this._call = call;
  }

  get call_data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get new_state(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get call_data_root(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }

  get last_time(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class Perform_many_optimisticallyCall__Outputs {
  _call: Perform_many_optimisticallyCall;

  constructor(call: Perform_many_optimisticallyCall) {
    this._call = call;
  }
}

export class Lock_userCall extends ethereum.Call {
  get inputs(): Lock_userCall__Inputs {
    return new Lock_userCall__Inputs(this);
  }

  get outputs(): Lock_userCall__Outputs {
    return new Lock_userCall__Outputs(this);
  }
}

export class Lock_userCall__Inputs {
  _call: Lock_userCall;

  constructor(call: Lock_userCall) {
    this._call = call;
  }

  get suspect(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Lock_userCall__Outputs {
  _call: Lock_userCall;

  constructor(call: Lock_userCall) {
    this._call = call;
  }
}

export class UnlockCall extends ethereum.Call {
  get inputs(): UnlockCall__Inputs {
    return new UnlockCall__Inputs(this);
  }

  get outputs(): UnlockCall__Outputs {
    return new UnlockCall__Outputs(this);
  }
}

export class UnlockCall__Inputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }

  get suspect(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get state(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get call_data_root(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get last_time(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UnlockCall__Outputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class Prove_fraudCall extends ethereum.Call {
  get inputs(): Prove_fraudCall__Inputs {
    return new Prove_fraudCall__Inputs(this);
  }

  get outputs(): Prove_fraudCall__Outputs {
    return new Prove_fraudCall__Outputs(this);
  }
}

export class Prove_fraudCall__Inputs {
  _call: Prove_fraudCall;

  constructor(call: Prove_fraudCall) {
    this._call = call;
  }

  get suspect(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get call_data(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get state(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get call_data_root(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }

  get last_time(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class Prove_fraudCall__Outputs {
  _call: Prove_fraudCall;

  constructor(call: Prove_fraudCall) {
    this._call = call;
  }
}

export class RollbackCall extends ethereum.Call {
  get inputs(): RollbackCall__Inputs {
    return new RollbackCall__Inputs(this);
  }

  get outputs(): RollbackCall__Outputs {
    return new RollbackCall__Outputs(this);
  }
}

export class RollbackCall__Inputs {
  _call: RollbackCall;

  constructor(call: RollbackCall) {
    this._call = call;
  }

  get rolled_back_call_data_root(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get rolled_back_call_data(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get roll_back_proof(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get current_size(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get current_size_proof(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get call_data_root(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get state(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get last_time(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class RollbackCall__Outputs {
  _call: RollbackCall;

  constructor(call: RollbackCall) {
    this._call = call;
  }
}
